package com.example.demo.mock;

import com.example.demo.order.domain.OrderHistory;
import com.example.demo.order.service.port.OrderHistoryRepository;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

public class FakeOrderHistoryRepository implements OrderHistoryRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<OrderHistory> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public OrderHistory save(OrderHistory orderHistory) {
        if(orderHistory.getId() == null || orderHistory.getId() == 0) {
            OrderHistory newOrderHistory = OrderHistory.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .buyer(orderHistory.getBuyer())
                    .product(orderHistory.getProduct())
                    .price(orderHistory.getPrice())
                    .status(orderHistory.getStatus())
                    .registDt(orderHistory.getRegistDt())
                    .build();
            data.add(newOrderHistory);
            System.out.println("save: " + data);
            return orderHistory;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), orderHistory.getId()));
            data.add(orderHistory);
            System.out.println("update: " + data);
            System.out.println("update 후 사이즈: " + data.size());
            return orderHistory;
        }
    }

    @Override
    public Optional<OrderHistory> findById(long id) {
        return data.stream().filter(item -> item.getId().equals(id)).findAny();
    }

    @Override
    public List<OrderHistory> findByProduct_Id(long productId) {
        return data.stream().filter(item -> item.getProduct().getId().equals(productId)).collect(Collectors.toList());
    }

    @Override
    public List<OrderHistory> findByBuyerId(long buyerId) {
        return data.stream().filter(item -> item.getBuyer().getId().equals(buyerId)).collect(Collectors.toList());
    }

    @Override
    public List<OrderHistory> findBySellerId(long sellerId) {
        return data.stream().filter(item -> item.getProduct().getSeller().getId().equals(sellerId)).collect(Collectors.toList());
    }

    @Override
    public List<OrderHistory> findByProduct_IdAndBuyer_Id(long productId, long buyerId) {
        return data.stream().filter(item -> item.getProduct().getId().equals(productId) &&
                item.getBuyer().getId().equals(buyerId)).collect(Collectors.toList());
    }

    @Override
    public List<OrderHistory> findByProduct_IdAndProduct_Seller_Id(long productId, long sellerId) {
        return data.stream().filter(item -> item.getProduct().getId().equals(productId) &&
                item.getProduct().getSeller().getId().equals(sellerId)).collect(Collectors.toList());
    }
}
